//@version=5
indicator("SMC/ICT Zones Pro (H1/M15/M5) – OB, FVG, Breaker, Sweeps", overlay=true, max_labels_count=500, max_boxes_count=500)

//-------------------- Inputs
sym         = input.symbol(syminfo.tickerid, "Symbol")
tfTrend     = input.timeframe("60", "Trend TF (H1)")
tfEntry     = input.timeframe("15", "Entry TF (M15)")
tfMicro     = input.timeframe("5",  "Micro TF (M5)")
showOB      = input.bool(true,  "Show Order Blocks")
showFVG     = input.bool(true,  "Show Fair Value Gaps")
showBreaker = input.bool(true,  "Show Breaker Blocks")
showSweeps  = input.bool(true,  "Show Liquidity Sweeps")
showSignals = input.bool(true,  "Show Signals (arrows)")
alertsOn    = input.bool(true,  "Enable Alert Conditions")

//-------------------- Helpers
get(src, tf) => request.security(sym, tf, src, barmerge.gaps_off, barmerge.lookahead_off)
hh(tf) => get(high, tf)
ll(tf) => get(low, tf)
op(tf) => get(open, tf)
cl(tf) => get(close, tf)

// Trend: simple HH/HL / LL/LH heuristic on Trend TF
trendUp   = hh(tfTrend)[1] > hh(tfTrend)[2] and ll(tfTrend)[1] > ll(tfTrend)[2]
trendDown = hh(tfTrend)[1] < hh(tfTrend)[2] and ll(tfTrend)[1] < ll(tfTrend)[2]
trend     = trendUp ? 1 : trendDown ? -1 : 0

//-------------------- ICT Blocks on Entry TF (M15)
var box[] obBoxes = array.new_box()
var box[] brkBoxes = array.new_box()
var box[] fvgBoxes = array.new_box()

// OB (last opposite candle) on Entry TF
bearishOB = cl(tfEntry)[2] < op(tfEntry)[2]  // red candle
bullishOB = cl(tfEntry)[2] > op(tfEntry)[2]  // green candle

obLow  = na
obHigh = na
if showOB
    if trend == 1 and bearishOB
        obLow  := ll(tfEntry)[2]
        obHigh := hh(tfEntry)[2]
        array.push(obBoxes, box.new(bar_index-2, obLow, bar_index, obHigh, border_color=color.new(color.teal, 0), bgcolor=color.new(color.teal, 85)))
    if trend == -1 and bullishOB
        obLow  := ll(tfEntry)[2]
        obHigh := hh(tfEntry)[2]
        array.push(obBoxes, box.new(bar_index-2, obLow, bar_index, obHigh, border_color=color.new(color.orange, 0), bgcolor=color.new(color.orange, 85)))

// FVG (3-candle gap) on Entry TF
fvgLow  = na
fvgHigh = na
if showFVG
    // bullish: low(0) > high(2)
    bullFvg = ll(tfEntry)[0] > hh(tfEntry)[2]
    // bearish: high(0) < low(2)
    bearFvg = hh(tfEntry)[0] < ll(tfEntry)[2]
    if bullFvg
        fvgLow  := hh(tfEntry)[2]
        fvgHigh := ll(tfEntry)[0]
        array.push(fvgBoxes, box.new(bar_index-2, fvgLow, bar_index, fvgHigh, border_color=color.new(color.lime, 0), bgcolor=color.new(color.lime, 88)))
    if bearFvg
        fvgLow  := hh(tfEntry)[0]
        fvgHigh := ll(tfEntry)[2]
        array.push(fvgBoxes, box.new(bar_index-2, fvgLow, bar_index, fvgHigh, border_color=color.new(color.red, 0), bgcolor=color.new(color.red, 88)))

// Breaker (flip candle after structure shift) – simplified proxy: strong candle aligned with trend following opposite OB
breakerLow  = na
breakerHigh = na
if showBreaker
    bullBreaker = trend == 1 and cl(tfEntry)[1] > op(tfEntry)[1] and cl(tfEntry)[1] > hh(tfEntry)[2]
    bearBreaker = trend == -1 and cl(tfEntry)[1] < op(tfEntry)[1] and cl(tfEntry)[1] < ll(tfEntry)[2]
    if bullBreaker
        breakerLow  := ll(tfEntry)[1]
        breakerHigh := hh(tfEntry)[1]
        array.push(brkBoxes, box.new(bar_index-1, breakerLow, bar_index, breakerHigh, border_color=color.new(color.green, 0), bgcolor=color.new(color.green, 88)))
    if bearBreaker
        breakerLow  := ll(tfEntry)[1]
        breakerHigh := hh(tfEntry)[1]
        array.push(brkBoxes, box.new(bar_index-1, breakerLow, bar_index, breakerHigh, border_color=color.new(color.maroon, 0), bgcolor=color.new(color.maroon, 88)))

// Liquidity sweep on Micro TF: sweep prior swing
priorHigh = ta.highest(get(high, tfMicro), 10)[1]
priorLow  = ta.lowest(get(low, tfMicro), 10)[1]
sweepUp   = showSweeps and high > priorHigh
sweepDn   = showSweeps and low  < priorLow
plotshape(sweepUp, title="Sweep Up", style=shape.triangledown, color=color.new(color.fuchsia, 0), size=size.tiny, location=location.abovebar, text="Sweep↑")
plotshape(sweepDn, title="Sweep Down", style=shape.triangleup, color=color.new(color.aqua, 0), size=size.tiny, location=location.belowbar, text="Sweep↓")

//-------------------- Signal logic (touch + micro confirm)
inOBLong  = trend == 1 and not na(obLow)  and low  <= obHigh
inOBShort = trend == -1 and not na(obHigh) and high >= obLow
inFVGLong = trend == 1 and not na(fvgLow)  and low  <= fvgHigh
inFVGShort= trend == -1 and not na(fvgHigh) and high >= fvgLow
inBRKLong = trend == 1 and not na(breakerLow)  and low  <= breakerHigh
inBRKShort= trend == -1 and not na(breakerHigh) and high >= breakerLow

microBull = get(close, tfMicro) > get(open, tfMicro)
microBear = get(close, tfMicro) < get(open, tfMicro)

longSig  = showSignals and trend == 1 and (inOBLong or inFVGLong or inBRKLong or sweepDn) and microBull
shortSig = showSignals and trend == -1 and (inOBShort or inFVGShort or inBRKShort or sweepUp) and microBear

plotshape(longSig,  style=shape.arrowup,   color=color.new(color.lime, 0),   location=location.belowbar, size=size.large, text="BUY")
plotshape(shortSig, style=shape.arrowdown, color=color.new(color.red,  0),   location=location.abovebar, size=size.large, text="SELL")

// Alerts
if alertsOn
    alertcondition(longSig,  "SMC/ICT BUY",  "BUY signal on {{ticker}} (H1/M15/M5 confluence)")
    alertcondition(shortSig, "SMC/ICT SELL", "SELL signal on {{ticker}} (H1/M15/M5 confluence)")